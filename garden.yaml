esphome:
  name: garden
  comment: "Garden controller"
  includes:
    - pump.h
  on_boot:
  # this makes pumps go off just in case
    - priority: -100.0
      then:
        - lambda: id(pwm_output).set_level(0);
        - switch.turn_off: pump1

# restore_from_flash is important here
esp8266:
  board: esp01_1m
  restore_from_flash: yes
  
# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  password: "8d80d5f3875a17217c9eee1761481f00"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garden Fallback Hotspot"
    password: "yr17JLySkNuR"

captive_portal:


sensor:
  - platform: dht
    pin: GPIO14
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 120s
    
# Reports the WiFi signal strength
  - platform: wifi_signal
    name: Signal
    update_interval: 60s

# pump power is saved here (assuming pump is DC operated via PWM)
  - platform: template
    name: "Pump 1 Power (saved)"
    id: pump1_power_sensor
    lambda: 'return id(pump1_power);'
    update_interval: 60s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: "Pump 2 Power (saved)"
    id: pump2_power_sensor
    lambda: 'return id(pump2_power);'
    update_interval: 60s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true

  
globals:
  - id: pump1_power
    type: float
    restore_value: yes
     
  - id: pump2_power
    type: float
    restore_value: yes

number:
  - platform: template
    name: "Pump 1 power"
    id: "pump1_power_slider"
    step: 1
    min_value: 5
    max_value: 50
    mode: slider
    optimistic: yes
    unit_of_measurement: '%'
    icon: "mdi:water"
    restore_value: yes
    set_action:
      then:
        - lambda:  id(pump1_power) = x;

  - platform: template
    name: "Pump 2 power"
    id: "pump2_power_slider"
    step: 1
    min_value: 5
    max_value: 50
    mode: slider
    optimistic: yes
    unit_of_measurement: '%'
    icon: "mdi:water"
    restore_value: yes
    set_action:
      then:
        - lambda:  id(pump2_power) = x;
        
output:
  - platform: esp8266_pwm
    pin: GPIO4
    frequency: 50 Hz
    id: pwm_output
    min_power: 0%
    max_power: 20%
    
switch:
  - platform: template
    id: "pump1"
    name: "Pump 1"
    lambda: 'return id(pump1).state;'
    icon: "mdi:water-pump"
    optimistic: yes
    restore_state: yes
    turn_on_action:
      - lambda: |-
            id(pwm_output).set_level(id(pump1_power)/100.0);
      - delay: 60s
      - switch.turn_off: pump1
      
    turn_off_action:
      - lambda: |-
            id(pwm_output).set_level(0);
    
            
